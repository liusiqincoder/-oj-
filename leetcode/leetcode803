package leetcode800to1000;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;

public class solution805 {

    public static boolean check(int[] A, int leftSum, int leftNum, int startIndex) {  
        //递归结束条件，如果lenthOfB ==0 ,返回 sumB是否为0.
        if (leftNum == 0) return leftSum == 0;
        //如果第一个元素 已经> average, 直接return false， 因为A是排序好的。
        if ((A[startIndex]) > leftSum / leftNum) return false;
        
        //从startIndex开始 找出 leftNum 个数字，使其和为 leftSum。 因为要找出leftNum 个，
        //因此遍历的最后一个元素为A.length-leftNum. 否则找不出足够的元素。
        for (int i = startIndex; i < A.length - leftNum + 1; i ++) {
            //如果当前的元素== 之前的元素，则直接跳过。因为 A[i-1] 在上一层的递归中已经处理过。 
	        if (i > startIndex && A[i] == A[i - 1]) continue;
            if (check(A, leftSum - A[i], leftNum - 1, i + 1)) return true;
        }
        return false;       
    }
    
    public static boolean splitArraySameAverage(int[] A) {
        if (A.length == 1) return false;
        int sumA = 0;
        sumA = Arrays.stream(A).sum();
        Arrays.sort(A);
        
        //遍历lenOfB的长度，然后从A中，递归找出lenOfB个元素是的 sumB = (sumA * lenOfB) / A.length。
        for (int lenOfB = 1; lenOfB <= A.length / 2; lenOfB ++) {
            //如果存在sumB 为integer
            if ((sumA * lenOfB) % A.length == 0) {
                // 递归查找A中，是否存在lenOfB个元素，使得其和为 (sumA * lenOfB) / A.length
                if (check(A, (sumA * lenOfB) / A.length, lenOfB, 0)) return true;
            }
        }
        return false;
        
    }
    
	public static void main(String[] args) {
		int[] A= {1,1,1,1,1,1,1,1};
		System.out.println(splitArraySameAverage(A));
	}

}
刚开始也没想这么多，直接dfs，然后tle，最后还是借鉴一下别人
先把数组排序，一个一个试B数组的长度，在dfs，num和sum确定后就简单多了，在加一些筛选就过了
